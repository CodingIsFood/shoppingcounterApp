{"version":3,"sources":["logo.svg","components/navbar.jsx","components/Counter.js","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","className","href","this","props","totalCounters","Component","Counter","_this","getBadgeClasses","formatValue","onClick","onIncrement","counter","onDecrement","disabled","value","onDelete","id","classes","Counters","onReset","counters","map","count","components_Counter","key","App","state","handleDelete","counterID","filter","setState","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","handleDecrement","handleReset","c","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.975233dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass NavBar extends Component {\n\n\trender() {\n return (\n <nav className=\"navbar navbar-light bg-light\">\n  <a className=\"navbar-brand\" href=\"#\">Items {\"  \"}\n    <span className=\"badge badge-pill badge-secondary\">\n     {this.props.totalCounters}\n    </span>\n  </a>\n </nav>\n\t\t)\n\t}\n}\n\nexport default NavBar;","import React, { Component } from \"react\";\n\nclass Counter extends Component {  \n    \n    \n    //imageUrl: \"https://picsum.photos/200\"\n    \n\t\n\trender() {\n\t\t/*\n\t\tlet classes=\"badge m-3 badge-\";\n\t\tclasses+= this.state.value === 0 ? \"warning\" : \"primary\";\n\t\t*/\n\n\treturn (\n\t<div>\n\t\t<span className={this.getBadgeClasses()}>{this.formatValue()}</span>\n\t\t<button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm m-2\">+</button>\n\t\t<button onClick={() => this.props.onDecrement(this.props.counter)} className=\"btn btn-secondary btn-sm\" disabled={this.props.counter.value<1}>-</button>\n\t\t<button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-sm btn-danger m-3\">Delete</button>\n\t</div>\n\t )\n\t}\n\n\tformatValue() {\n\t\tconst { value } = this.props.counter;\n\t\treturn value === 0 ? \"Zero\" : value;\n\t}\n\n   getBadgeClasses() {\n\tlet classes=\"badge m-3 badge-\";\n\tclasses+= this.props.counter.value === 0 ? \"warning\" : \"primary\";\n\treturn classes\n}\n\t\n}\n\nexport default Counter","import React, {Component} from 'react';\nimport Counter from './Counter.js';\n\nclass Counters extends Component {\n\t\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t<button onClick={this.props.onReset} className=\"btn btn-sm btn-danger m-3\">Reset</button>\n\n\t\t\t{this.props.counters.map(count => \n\t\t\t\t<Counter key={count.id} counter={count} onDelete={this.props.onDelete} onDecrement={this.props.onDecrement} onIncrement={this.props.onIncrement} />)}\n\t\t\t</div>\n\t\t\t)\n\t}\n\n}\n\nexport default Counters;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBar from './components/navbar.jsx';\nimport Counters from './components/counters.jsx';\n\nclass App extends Component {\n\nstate={\n    counters: [\n       {id: 1, value: 0},\n       {id: 2, value: 3},\n       {id: 3, value: 0},\n       {id: 4, value: 7}  \n    ]\n\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c=>c.value>0).length} />\n      <main className=\"container\">\n      <Counters onReset={this.handleReset} onDelete={this.handleDelete} onDecrement={this.handleDecrement} onIncrement={this.handleIncrement} counters={this.state.counters}/>\n      </main>\n      </React.Fragment>\n    );\n  }\n\n  handleDelete = (counterID) => {\n    const counters=this.state.counters.filter(counter => counter.id !==counterID);\n    this.setState({counters: counters});\n  }\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters]\n    const index = counters.indexOf(counter)\n    counters[index]={...counter}\n    counters[index].value++;\n    this.setState({counters});\n  }\n\n  handleDecrement = (counter) => {\n    const counters = [...this.state.counters]\n    const index = counters.indexOf(counter)\n    counters[index]={...counter}\n    counters[index].value--;\n    this.setState({counters});\n  }\n\n  handleReset = () => {\n    const counters=this.state.counters.map(c => {\n      c.value=0\n      return c\n    });\n    this.setState({counters: counters});\n    //console.log(counters);\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from './components/counters.jsx'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}